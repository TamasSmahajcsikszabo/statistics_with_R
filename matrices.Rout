
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ dplyr   1.0.2
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> 
> 
> # matrix multiplication
> 
> A <- matrix(c(1, 2, 3, 4, 5, 6), byrow = TRUE, nrow = 2)
> B <- matrix(c(1, 2, 3, 4, 5, 6), byrow = FALSE, ncol = 2)
> C <- A %*% B
> # check of calculation
> C[1, 1] == A[1, 1] * B[1, 1] + A[1, 2] * B[2, 1] + A[1, 3] * B[3, 1]
[1] TRUE
> 
> 
> # 2 X 3 * 3 X 7
> 
> A <- matrix(rnorm(6), byrow = TRUE, nrow = 2)
> V <- matrix(rnorm(21), byrow = FALSE, ncol = 7)
> R <- A %*% V
> print(paste0("number of rows: ", nrow(R), "; number of columns: ", ncol(R)))
[1] "number of rows: 2; number of columns: 7"
> 
> 
> # 2 X 2 * 2 X 1
> 
> A <- matrix(rnorm(4), byrow = TRUE, nrow = 2)
> V <- matrix(rnorm(2), byrow = FALSE, ncol = 1)
> R <- A %*% V
> print(paste0("number of rows: ", nrow(R), "; number of columns: ", ncol(R)))
[1] "number of rows: 2; number of columns: 1"
> 
> 
> 
> # 1 X 9 * 9 X 1
> 
> A <- matrix(seq(1, 9, 1), byrow = TRUE, nrow = 1)
> V <- matrix(seq(1, 9, 1), byrow = FALSE, ncol = 1)
> R <- A %*% V
> print(paste0("number of rows: ", nrow(R), "; number of columns: ", ncol(R)))
[1] "number of rows: 1; number of columns: 1"
> 
> 
> 
> 
> # 2 X 2 * 2 X 2
> 
> A <- matrix(c(3, 4, -1, 8), byrow = TRUE, nrow = 2)
> V <- matrix(c(2, 3, -2, 7), byrow = FALSE, ncol = 2)
> R <- A %*% V
> 
> 
> # 3 X 3 * 3 X 2
> 
> A <- matrix(c(4, 3, 2, 1, -2, -4, -5, 8, 11), byrow = TRUE, nrow = 3)
> V <- matrix(c(3, -2, 1, -7, 6, -2), byrow = FALSE, ncol = 2)
> R <- A %*% V
> print(paste0("number of rows: ", nrow(R), "; number of columns: ", ncol(R)))
[1] "number of rows: 3; number of columns: 2"
> 
> # example for linear transformation
> v <- c(3, 2)
> M <- matrix(c(1, 2, 2, -2), byrow = TRUE, ncol = 2)
> 
> v %*% M
     [,1] [,2]
[1,]    7    2
> 
> as_vector_plot <- function(v) {
+   data <- data.frame(x = 0, y = 0)
+   new_point <- data.frame(x = v[1], y = v[2])
+ 
+   bind_rows(data, new_point)
+ }
> 
> as_product_plot <- function(v, M) {
+   product <- v %*% M
+   product_vec <- as.vector(product)
+   as_vector_plot(product_vec)
+ }
> 
> ggplot() +
+   geom_point(data = as_vector_plot(v), aes(x, y)) +
+   geom_segment(data = as_vector_plot(v), aes(x = 0, y = 0, xend = max(x), yend = max(y)), arrow = arrow(length = unit(0.02, "npc"))) +
+   geom_text(data = as_vector_plot(v), aes(x = max(x), y = max(y), label = paste0("Vector p of (", max(x), "; ", max(y), ")")), vjust = -2) +
+   geom_point(data = as_product_plot(v, M), aes(x, y)) +
+   geom_segment(data = as_product_plot(v, M), aes(x = 0, y = 0, xend = max(x), yend = max(y)), arrow = arrow(length = unit(0.02, "npc"))) +
+   geom_text(data = as_product_plot(v, M), aes(x = max(x), y = max(y), label = paste0("Vector p of (", max(x), "; ", max(y), ")")), vjust = -2) +
+   scale_x_continuous(breaks = seq(1, max(as_product_plot(v, M)[1]) * 5, 1), limits = c(0, max(as_product_plot(v, M)[1]) * 2)) +
+   ylim(0, v[2] * 5)
> 
> 
> # matrix transformations
> 
> x <- 4
> y <- 2
> v <- c(1, 0)
> theta <- -30
> 
> shearing <- function(v, k) {
+   x_shearing <- matrix(c(1, k, 0, 1), byrow = T, ncol = 2)
+   vec <- v %*% x_shearing
+ 
+   as.vector(vec)
+ }
> 
> ggplot() +
+   geom_point(data = as_vector_plot(shearing(v, 4)), aes(x, y)) +
+   geom_point(data = as_vector_plot(v), aes(x, y))
> 
> 
> derive_basis_vectors <- function(v) {
+   vec1 <- c(v[1], 0)
+   vec2 <- c(0, v[2])
+   matrix(c(vec1, vec2), byrow = TRUE, ncol = 2)
+ }
> 
> rotation <- function(v, theta) {
+   theta <- theta * pi / 180
+   v %*% matrix(c(cos(theta), (-1) * sin(theta), sin(theta), cos(theta)), byrow = TRUE, ncol = 2)
+ }
> 
> 
> v <- c(1, 1)
> original <- data.frame(matrix(unlist(derive_basis_vectors(v)),
+   byrow = TRUE,
+   ncol = 2
+ ))
> rotated <- data.frame(rotation(derive_basis_vectors(v), theta))
> 
> 
> ggplot() +
+   geom_point(data = original, aes(X1, X2)) +
+   geom_segment(data = original, aes(x = 0, y = 0, xend = X1, yend = X2), arrow = arrow(length = unit(0.02, "npc"))) +
+   geom_point(data = rotated, aes(X1, X2)) +
+   geom_segment(data = rotated, aes(x = 0, y = 0, xend = X1, yend = X2), linetype = "dashed", arrow = arrow(length = unit(0.02, "npc"))) +
+   xlim(-1, 1) +
+   ylim(-1, 1)
> 
> # conjugate transpose
> Conj(t(rotation(v, theta)))
          [,1]
[1,] 0.3660254
[2,] 1.3660254
> 
> # cofactor matrix
> 
> M <- matrix(c(3, 4, -2, -2, -2, 1, 1, 1, -7), byrow = TRUE, nrow = 3)
> 
> get_cofactor <- function(M, i, j) {
+   M_cof <- matrix(M[-i, -j], byrow = FALSE, nrow = nrow(M) - 1)
+ 
+   if (sum(i, j) %% 2 == 0) {
+     M_cof
+   } else {
+     M_cof * (-1)
+   }
+ }
> 
> estimate_determinant <- function(M) {
+   M[1, 1] * M[2, 2] - M[1, 2] * M[2, 1]
+ }
> 
> get_cofactor_matrix <- function(M, estimate = FALSE, adjoint = TRUE) {
+   i <- seq(1, nrow(M))
+   j <- seq(1, ncol(M))
+   m <- matrix(rep(0, (nrow(M) - 1) * (ncol(M) - 1)), nrow = nrow(M) - 1, ncol = ncol(M) - 1)
+   M_cof <- matrix(rep(list(m), length(M)), nrow = nrow(M))
+ 
+   for (i_i in i) {
+     for (j_i in j) {
+       M_cof[i_i, j_i][[1]] <- get_cofactor(M, i_i, j_i)
+     }
+   }
+   if (!estimate) {
+     M_cof
+   } else {
+     M_est <- matrix(nrow = nrow(M), ncol = ncol(M))
+     for (i_i in i) {
+       for (j_i in j) {
+         det <- estimate_determinant(M_cof[i_i, j_i][[1]])
+ 
+         if (sum(i_i, j_i) %% 2 != 0) {
+           det <- (-1) * det
+         }
+ 
+         M_est[i_i, j_i] <- det
+       }
+     }
+     if (adjoint) {
+       t(M_est)
+     } else {
+       M_est
+     }
+   }
+ }
> 
> get_cofactor_matrix(M, adjoint = TRUE, estimate = TRUE)
     [,1] [,2] [,3]
[1,]   13   26    0
[2,]  -13  -19    1
[3,]    0    1    2
> get_cofactor_matrix(M, estimate = TRUE)
     [,1] [,2] [,3]
[1,]   13   26    0
[2,]  -13  -19    1
[3,]    0    1    2
> 
> 
> 
> # get determinant
> 
> get_determinant <- function(M, reference_no = 1, reference_dim = "row") {
+   if (reference_dim == "row") {
+     reference <- M[reference_no, ]
+     cofactor_matrix <- get_cofactor_matrix(M)[reference_no, ]
+   } else if (reference_dim == "col") {
+     reference <- M[, reference_no]
+     cofactor_matrix <- get_cofactor_matrix(M)[, reference_no]
+   } else {
+     stop("Please supply either 'col' or 'row' as the reference dimension!")
+   }
+   det <- 0
+   for (i in seq_along(reference)) {
+     if (i %% 2 == 0) {
+       reference[i] <- reference[i] * (-1)
+     }
+     det <- det + reference[i] * estimate_determinant(cofactor_matrix[i][[1]])
+   }
+   det
+ }
> 
> get_determinant(M)
[1] -13
> 
> 
> get_inverse <- function(M) {
+   det <- get_determinant(M)
+   adjoint <- get_cofactor_matrix(M, estimate = TRUE, adjoint = TRUE)
+ 
+   1 / det * adjoint
+ }
> 
> get_inverse(M)
     [,1]        [,2]        [,3]
[1,]   -1 -2.00000000  0.00000000
[2,]    1  1.46153846 -0.07692308
[3,]    0 -0.07692308 -0.15384615
> # verification: I = M * M^-1
> M %*% get_cofactor_matrix(M, estimate = TRUE, adjoint = TRUE) * (1 / get_determinant(M))
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1
> 
> # book exercise verification; 5.12
> m <- matrix(c(4, -2, -2, 2, 8, 4, 30, 12, -4), byrow = TRUE, nrow = 3)
> dx <- matrix(c(10, -2, -2, 32, 8, 4, 24, 12, -4), byrow = TRUE, nrow = 3)
> dy <- matrix(c(4, 10, -2, 2, 32, 4, 30, 24, -4), byrow = TRUE, nrow = 3)
> dz <- matrix(c(4, -2, 10, 2, 8, 32, 30, 12, 24), byrow = TRUE, nrow = 3)
> 
> 
> d <- get_determinant(m)
> dx <- get_determinant(dx)
> dy <- get_determinant(dy)
> dz <- get_determinant(dz)
> 
> x <- dx / d
> y <- dy / d
> z <- dz / d
> 
> 
> # 5.13.
> m <- matrix(c(2, 1, 1, 1, -2, 3, -3, 2, -2), byrow = TRUE, nrow = 3)
> get_determinant(m)
[1] -15
> get_cofactor_matrix(m, estimate = TRUE, adjoint = TRUE)
     [,1] [,2] [,3]
[1,]   -2    4    5
[2,]   -7   -1   -5
[3,]   -4   -7   -5
> 
> proc.time()
   user  system elapsed 
  1.489   0.055   1.539 
